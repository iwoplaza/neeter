#title {
    #strong {Example Neeter Document} - Iwo Plaza & Krzysztof Faracik
}
#h1 { Intro }

This is an example document showcasing the features of #strong{Neeter}.
This language is designed to be #strong { simple } and #strong { efficient }.

All of this
is in the same line, by design.
Paragraphs are seperated by an one or more empty lines.

Simple formula: {{x = 1 + 2 + 4 + ... + 128}}.

#h1 { üëÄ Test 1 - Scoped variables}
@{
    let x = 5;                          show("{{let x = ", x, "}}\n\n");
    {
        show("{{BEGIN}}\n\n");
        x = 10;
        print_formula("x", x);
        let x = 15;                     show("{{let x be 15}}\n\n");
        let y = 5;                      show("{{let y be 5}}\n\n");
        print_formula("x", x);
        print_formula("y", y);
        print_formula("x + y", x + y);
        print_formula("x * y", x * y);
        print_formula("x / y", x / y);
        show("{{END}}\n\n");
    }
    print_formula("x", x);
@}
#h1 { ü•§ Test 2 - FizzBuzz}
@{
    fizzbuzz(20);
@}
#h1 { ‚ôªÔ∏è Test 3 - Recursive functions}
@{
    print_bounded("bounded hello", 5);
@}
#h1 { üëÄ Test 4 - Operator precedence}
@{
    print_formula("4 + 5 * 2", 4 + 5 * 2);
    print_formula("5 * 2 + 4", 5 * 2 + 4);

    print_formula("(4 + 5) * 2", (4 + 5) * 2);
    print_formula("5 * (2 + 4)", 5 * (2 + 4));
@}

@{
    def print_formula(label, value) {
        show("{{", label, " = ", value, "}}\n\n");
    }

    def fizzbuzz(n) {
        let i = 1;
        while (i < n) {
            if (i % 15 == 0) {
                show("Fizz Buzz", "\n\n");
            }
            else if (i % 3 == 0) {
                show("Fizz", "\n\n");
            }
            else if (i % 5 == 0)
            {
                show("Buzz", "\n\n");
            }
            else {
                show(i, "\n\n");
            }
            i=i+1;
        }
    }

    def print_bounded(value, n) {
        if (n > 0) {
            show("(");
            print_bounded(value, n - 1);
            show(")");
        }
        else {
            show(value);
        }
    }
@}